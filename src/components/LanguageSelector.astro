---
import { getLangFromUrl, languages, getLocalizedPath } from "../i18n/utils";
import FlagAR from "./icons/FlagAR.astro";
import FlagUS from "./icons/FlagUS.astro";
import FlagBR from "./icons/FlagBR.astro";

const currentLang = getLangFromUrl(Astro.url);
const currentPath = Astro.url.pathname.replace(/^\/(en|es|pt)/, "") || "/";

const flagComponents = {
  es: FlagAR,
  en: FlagUS,
  pt: FlagBR,
} as const;

const CurrentFlag = flagComponents[currentLang];
---

<div class="relative inline-block" id="language-selector">
  <button
    id="lang-toggle"
    class="flex items-center gap-2 px-3 py-1 rounded-full border border-gray-300/40 dark:border-gray-700/40 bg-white/50 dark:bg-white/5 hover:bg-white/80 dark:hover:bg-white/10 transition-all duration-300 backdrop-blur-sm text-sm sm:text-base"
    aria-label="Change language"
    aria-expanded="false"
  >
    <CurrentFlag />
    <span class="font-medium uppercase">{currentLang}</span>
    <svg
      class="size-4 transition-transform duration-200"
      id="chevron"
      viewBox="0 0 24 24"
      stroke-width="2"
      stroke="currentColor"
      fill="none"
    >
      <path stroke-linecap="round" stroke-linejoin="round" d="M19 9l-7 7-7-7"
      ></path>
    </svg>
  </button>

  <div
    id="lang-menu"
    class="hidden absolute right-0 mt-2 w-44 rounded-lg border border-gray-300/40 dark:border-gray-700/40 bg-white/95 dark:bg-neutral-900/95 backdrop-blur-md shadow-xl overflow-hidden z-50"
  >
    {
      Object.entries(languages).map(([lang, name]) => {
        const href = lang === "es" ? currentPath : `/${lang}${currentPath}`;
        const isActive = lang === currentLang;
        const FlagComponent =
          flagComponents[lang as keyof typeof flagComponents];

        return (
          <a
            href={href}
            class={`block px-4 py-3 text-sm hover:bg-gray-100 dark:hover:bg-white/10 transition-colors ${
              isActive ? "bg-gray-100 dark:bg-white/10 font-semibold" : ""
            }`}
            data-lang={lang}
          >
            <div class="flex items-center gap-3 w-full">
              <FlagComponent />
              <span>{name}</span>
              {isActive && (
                <svg
                  class="size-4 ml-auto text-green-600 dark:text-green-400"
                  viewBox="0 0 24 24"
                  fill="none"
                  stroke="currentColor"
                  stroke-width="3"
                >
                  <path
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    d="M5 13l4 4L19 7"
                  />
                </svg>
              )}
            </div>
          </a>
        );
      })
    }
  </div>
</div>

<script>
  const toggle = document.getElementById("lang-toggle");
  const menu = document.getElementById("lang-menu");
  const chevron = document.getElementById("chevron");
  const selector = document.getElementById("language-selector");

  if (toggle && menu && chevron) {
    toggle.addEventListener("click", (e) => {
      e.stopPropagation();
      const isHidden = menu.classList.contains("hidden");

      if (isHidden) {
        menu.classList.remove("hidden");
        chevron.style.transform = "rotate(180deg)";
        toggle.setAttribute("aria-expanded", "true");
      } else {
        menu.classList.add("hidden");
        chevron.style.transform = "rotate(0deg)";
        toggle.setAttribute("aria-expanded", "false");
      }
    });

    // Cerrar al hacer click fuera
    document.addEventListener("click", (e) => {
      if (selector && !selector.contains(e.target as Node)) {
        menu.classList.add("hidden");
        chevron.style.transform = "rotate(0deg)";
        toggle.setAttribute("aria-expanded", "false");
      }
    });

    // Cerrar con Escape
    document.addEventListener("keydown", (e) => {
      if (e.key === "Escape" && !menu.classList.contains("hidden")) {
        menu.classList.add("hidden");
        chevron.style.transform = "rotate(0deg)";
        toggle.setAttribute("aria-expanded", "false");
        toggle.focus();
      }
    });
  }
</script>
